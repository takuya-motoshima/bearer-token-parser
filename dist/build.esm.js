var e="1.0.1";class r{static parseBearerToken(e){if(!e.authorization)return;const t=e.authorization.match(r.REG_TOKEN);return t?t[1]:void 0}}r.REG_TOKEN=/^Bearer\s+([A-Za-z0-9\-\._~\+\/]+)=*$/;class t{static validation(e){return e=Object.assign({realm:"",tokenCheckCallback:void 0,requestParameterCheck:void 0},e||{}),async(t,a,n)=>{if(!t.headers.authorization)return void a.header("WWW-Authenticate",`Bearer realm="${e.realm}", error="token_required"`).sendStatus(401);const i=r.parseBearerToken(t.headers);if(i){if(e.tokenCheckCallback){if(!(this.isAsyncFunction(e.tokenCheckCallback)?await e.tokenCheckCallback(i):e.tokenCheckCallback(i)))return void a.header("WWW-Authenticate",`Bearer realm="${e.realm}", error="invalid_token", error_description="Token cannot be authenticated"`).sendStatus(401)}if(e.requestParameterCheck){if(!(this.isAsyncFunction(e.requestParameterCheck)?await e.requestParameterCheck(t):e.requestParameterCheck(t)))return void a.header("WWW-Authenticate",`Bearer realm="${e.realm}", error="invalid_request"`).sendStatus(400)}n()}else a.header("WWW-Authenticate",`Bearer realm="${e.realm}", error="invalid_token", error_description="Token format error"`).sendStatus(401)}}static isAsyncFunction(e){return e&&e.constructor&&e.constructor===Object.getPrototypeOf((async function(){})).constructor}}export{r as BearerParser,t as BearerValidator,e as version};
